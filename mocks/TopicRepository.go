// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/keshvan/forum-service-sstu-forum/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// TopicRepository is an autogenerated mock type for the TopicRepository type
type TopicRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TopicRepository) Create(_a0 context.Context, _a1 entity.Topic) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Topic) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Topic) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Topic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TopicRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCategory provides a mock function with given fields: ct, categoryID
func (_m *TopicRepository) GetByCategory(ct context.Context, categoryID int64) ([]entity.Topic, error) {
	ret := _m.Called(ct, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCategory")
	}

	var r0 []entity.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.Topic, error)); ok {
		return rf(ct, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.Topic); ok {
		r0 = rf(ct, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ct, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *TopicRepository) GetByID(_a0 context.Context, _a1 int64) (*entity.Topic, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Topic, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, title
func (_m *TopicRepository) Update(ctx context.Context, id int64, title string) error {
	ret := _m.Called(ctx, id, title)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTopicRepository creates a new instance of TopicRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopicRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopicRepository {
	mock := &TopicRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
