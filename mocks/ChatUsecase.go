// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/keshvan/forum-service-sstu-forum/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ChatUsecase is an autogenerated mock type for the ChatUsecase type
type ChatUsecase struct {
	mock.Mock
}

// GetMessageHistory provides a mock function with given fields: ctx, limit
func (_m *ChatUsecase) GetMessageHistory(ctx context.Context, limit int64) ([]entity.ChatMessage, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageHistory")
	}

	var r0 []entity.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.ChatMessage, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.ChatMessage); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: ctx, userID, username, content
func (_m *ChatUsecase) SaveMessage(ctx context.Context, userID int64, username string, content string) (*entity.ChatMessage, error) {
	ret := _m.Called(ctx, userID, username, content)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 *entity.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (*entity.ChatMessage, error)); ok {
		return rf(ctx, userID, username, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) *entity.ChatMessage); ok {
		r0 = rf(ctx, userID, username, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, userID, username, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatUsecase creates a new instance of ChatUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatUsecase {
	mock := &ChatUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
